import { IAttr } from "./tag.js";
import { IAttachFn } from "./attach/_index.js";
export declare namespace bootstrapType {
    type VIEWPORT = "sm" | "md" | "lg" | "xl" | "xxl";
    type SPACER = "auto" | 0 | 1 | 2 | 3 | 4 | 5;
    type GRID = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    type ROWCOL = "auto" | GRID;
    type FLEX = "row" | "row-reverse" | "column" | "column-reverse" | "wrap" | "wrap-reverse" | "nowrap" | "fill" | "shrink-0" | "shrink-1" | "grow-0" | "grow-1";
    type FLOAT = "start" | "end" | "none";
    type ORDER = "first" | "last" | GRID;
    type ALIGN = "start" | "end" | "center" | "baseline" | "stretch";
    type ALIGNCONTENT = "start" | "end" | "center" | "between" | "around" | "stretch";
    type JUSTIFYCONTENT = "start" | "end" | "center" | "between" | "around" | "evenly";
    type DISPLAY = "none" | "inline" | "inline-block" | "block" | "grid" | "table" | "table-cell" | "table-row" | "flex" | "inline-flex";
    type POSITIONVIEW = "start" | "center" | "end";
    type COLOR = "primary" | "secondary" | "success" | "danger" | "warning" | "info" | "light" | "dark";
    type COLOREMPHASIS = `${COLOR}-emphasis`;
    type COLORSUBTLE = `${COLOR}-subtle`;
    type BODYCOLOR = "body" | "body-secondary" | "body-tertiary";
    type OTHERCOLOR = "white" | "black";
    type BODYTEXTCOLOR = BODYCOLOR | OTHERCOLOR | "body-emphasis";
    type OPACITY = 0 | 25 | 50 | 75 | 100;
    type BGOPACITY = 10 | 25 | 50 | 75 | 100;
    type TEXTOPACITY = 25 | 50 | 75 | 100;
    type BORDEROPACITY = 10 | 25 | 50 | 75;
    type LINKOFFSET = 1 | 2 | 3;
    type LINKOPACITY = BGOPACITY;
    type LINKUNDERLINEOPACITY = 0 | LINKOPACITY;
    type FONTSIZE = 1 | 2 | 3 | 4 | 5 | 6;
    type TOP = 0 | 50 | 100;
    type HEIGHT = "auto" | 25 | 50 | 75 | 100;
    type BORDERWIDTH = 0 | 1 | 2 | 3 | 4 | 5;
    type ZINDEX = 0 | 1 | 2 | 3 | "n1";
    type OBJECTFIT = "contain" | "cover" | "fill" | "scale" | "none";
    type STICKY = "top" | "bottom";
    type ROUNDED = "top" | "end" | "bottom" | "start";
    type ROUNDEDSIZE = BORDERWIDTH;
    type ROUNDEDSTYLE = "pill" | "circle";
    type _grid = GRID | `${GRID}` | `${VIEWPORT}-${GRID}`;
    type _spacer = SPACER | `${SPACER}` | `${VIEWPORT}-${SPACER}`;
    type _align = ALIGN | `${VIEWPORT}-${ALIGN}`;
    type _positionView = POSITIONVIEW | `${VIEWPORT}-${POSITIONVIEW}`;
    export type color = COLOR;
    export type viewport = VIEWPORT;
    export type theme = "light" | "dark" | "auto";
    export type pointer = true;
    export type label = string;
    export type labelledby = string;
    export type ownby = string;
    export type describedby = string;
    export type controlfor = string;
    export type flex = FLEX | `${VIEWPORT}-${FLEX}`;
    export type float = FLOAT | `${VIEWPORT}-${FLOAT}`;
    export type order = ORDER | `${ORDER}` | `${VIEWPORT}-${ORDER}`;
    export type offset = _grid;
    export type alignContent = ALIGNCONTENT | `${VIEWPORT}-${ALIGNCONTENT}`;
    export type justifyContent = JUSTIFYCONTENT | `${VIEWPORT}-${JUSTIFYCONTENT}`;
    export type alignItem = _align;
    export type alignSelf = _align;
    export type display = DISPLAY | `${VIEWPORT}-${DISPLAY}`;
    export type rowCol = ROWCOL | `${ROWCOL}` | `${VIEWPORT}-${ROWCOL}`;
    export type visible = boolean;
    export type textWrap = boolean;
    export type fontItalic = boolean;
    export type bgGradient = true;
    export type textBreak = true;
    export type monospace = true;
    export type loadingPlaceholder = true;
    export type loadingPlaceholderAnimation = "glow" | "wave";
    export type loadingPlaceholderWeight = "lg" | "sm" | "xs";
    export type row = true;
    export type col = true | ROWCOL | `${ROWCOL}` | VIEWPORT | `${VIEWPORT}-${ROWCOL}`;
    export type userSelect = "all" | "auto" | "none";
    export type pointerEvent = "auto" | "none";
    export type position = "static" | "relative" | "absolute" | "fixed" | "sticky";
    export type overflow = "auto" | "hidden" | "scroll" | "visible";
    export type overflowX = overflow;
    export type overflowY = overflow;
    export type textAlign = _positionView;
    export type verticalAlign = "baseline" | "top" | "middle" | "bottom" | "text-top" | "text-bottom";
    export type opacity = OPACITY | `${OPACITY}`;
    export type bgOpacity = BGOPACITY | `${BGOPACITY}`;
    export type textOpacity = TEXTOPACITY | `${TEXTOPACITY}`;
    export type focusRing = true | COLOR;
    export type textBgColor = COLOR;
    export type textColor = COLOR | COLOREMPHASIS | BODYCOLOR | BODYTEXTCOLOR | OTHERCOLOR | "reset";
    export type bgColor = COLOR | COLORSUBTLE | BODYCOLOR | OTHERCOLOR | "transparent";
    export type iconLink = true | "hover";
    export type textTransform = "lowercase" | "uppercase" | "capitalize";
    export type textDecoration = "underline" | "line-through" | "none";
    export type lineHeight = 1 | "1" | "sm" | "base" | "lg";
    export type fontSize = FONTSIZE | `${FONTSIZE}`;
    export type fontDisplay = fontSize;
    export type fontWeight = "bold" | "bolder" | "semibold" | "medium" | "normal" | "light" | "lighter";
    export type top = TOP | `${TOP}`;
    export type bottom = top;
    export type start = top;
    export type end = top;
    export type tMiddle = true | "x" | "y";
    export type height = HEIGHT | `${HEIGHT}`;
    export type width = height;
    export type maxHeight = 100 | "100";
    export type maxWidth = 100 | "100";
    export type minViewHeight = 100 | "100";
    export type minViewWidth = 100 | "100";
    export type viewHeight = 100 | "100";
    export type viewWidth = 100 | "100";
    export type shadow = boolean | "none" | "sm" | "lg" | "inset";
    export type borderNone = true | "top" | "end" | "bottom" | "start";
    export type border = false | borderNone;
    export type borderColor = COLOR | COLORSUBTLE | OTHERCOLOR;
    export type borderOpacity = BORDEROPACITY | `${BORDEROPACITY}`;
    export type borderWidth = BORDERWIDTH | `${BORDERWIDTH}`;
    export type roundedNone = border;
    export type rounded = boolean | ROUNDEDSIZE | `${ROUNDEDSIZE}` | ROUNDED | ROUNDEDSTYLE | `${ROUNDED}-${ROUNDEDSTYLE}` | `${ROUNDED}-${ROUNDEDSIZE}` | `${ROUNDEDSTYLE}-${ROUNDEDSIZE}`;
    export type roundedSize = ROUNDEDSIZE | `${ROUNDEDSIZE}`;
    export type padding = _spacer;
    export type paddingX = _spacer;
    export type paddingY = _spacer;
    export type paddingTop = _spacer;
    export type paddingBottom = _spacer;
    export type paddingStart = _spacer;
    export type paddingEnd = _spacer;
    export type margin = _spacer;
    export type marginX = _spacer;
    export type marginY = _spacer;
    export type marginTop = _spacer;
    export type marginBottom = _spacer;
    export type marginStart = _spacer;
    export type marginEnd = _spacer;
    export type gap = _spacer;
    export type gutter = _spacer;
    export type gutterX = _spacer;
    export type gutterY = _spacer;
    export type print = display;
    export type container = true | VIEWPORT | "fluid" | "xs";
    export type zIndex = ZINDEX | `${ZINDEX}`;
    export type objectFit = OBJECTFIT | `${VIEWPORT}-${OBJECTFIT}`;
    export type ratio = true | "1x1" | "4x3" | "16x9" | "21x9";
    export type fixed = STICKY;
    export type sticky = STICKY | `${VIEWPORT}-${STICKY}`;
    export type clearfix = true;
    export type textTruncate = true;
    export type vstack = true;
    export type hstack = true;
    export type visually = "hidden" | "hidden-focusable";
    export type h = fontDisplay;
    export type small = true;
    export type linkColor = COLOR | BODYTEXTCOLOR;
    export type linkUnderlineColor = linkColor;
    export type linkOffset = LINKOFFSET | `${LINKOFFSET}`;
    export type linkOffsetHover = linkOffset;
    export type linkOpacity = LINKOPACITY | `${LINKOPACITY}`;
    export type linkOpacityHover = linkOpacity;
    export type linkUnderline = true;
    export type linkUnderlineOpacity = LINKUNDERLINEOPACITY | `${LINKUNDERLINEOPACITY}`;
    export type linkUnderlineOpacityHover = linkUnderlineOpacity;
    export type btnColor = COLOR | "link" | "transparent";
    export type btnOutlineColor = COLOR;
    export type alertColor = COLOR;
    export type alertDismissible = true;
    export type dropdownDirection = "up" | "start" | "end";
    export type dropdownMenuPositionView = _positionView;
    export {};
}
export interface ClassFormatter {
    shared?: boolean;
    value?: (string | number | boolean)[];
    format?: string;
    formatValue?: string;
    formatTrue?: string;
    formatFalse?: string;
}
export declare class bsClassFormatterRule implements ClassFormatter {
    shared?: boolean;
    value?: (string | number | boolean)[];
    format?: string;
    formatValue?: string;
    formatTrue?: string;
    formatFalse?: string;
    constructor(d: ClassFormatter);
}
export type AttrFormatter = (elem: Element, data: string | number | boolean) => Element;
export interface Attr {
    theme?: bootstrapType.theme;
    pointer?: bootstrapType.pointer;
    label?: string;
    labelledby?: string;
    ownby?: string;
    describedby?: string;
    controlfor?: string;
    gridArea?: string;
    gridTemplateColumns?: string;
    gridTemplateRows?: string;
    gridTemplateAreas?: string;
}
export interface Class {
    flex?: bootstrapType.flex | bootstrapType.flex[];
    float?: bootstrapType.float | bootstrapType.float[];
    order?: bootstrapType.order | bootstrapType.order[];
    offset?: bootstrapType.offset | bootstrapType.offset[];
    alignContent?: bootstrapType.alignContent | bootstrapType.alignContent[];
    justifyContent?: bootstrapType.justifyContent | bootstrapType.justifyContent[];
    alignItem?: bootstrapType.alignItem | bootstrapType.alignItem[];
    alignSelf?: bootstrapType.alignSelf | bootstrapType.alignSelf[];
    display?: bootstrapType.display | bootstrapType.display[];
    rowCol?: bootstrapType.rowCol | bootstrapType.rowCol[];
    visible?: bootstrapType.visible;
    textWrap?: bootstrapType.textWrap;
    fontItalic?: bootstrapType.fontItalic;
    bgGradient?: bootstrapType.bgGradient;
    textBreak?: bootstrapType.textBreak;
    monospace?: bootstrapType.monospace;
    loadingPlaceholder?: bootstrapType.loadingPlaceholder;
    loadingPlaceholderAnimation?: bootstrapType.loadingPlaceholderAnimation;
    loadingPlaceholderWeight?: bootstrapType.loadingPlaceholderWeight;
    row?: bootstrapType.row;
    col?: bootstrapType.col | bootstrapType.col[];
    userSelect?: bootstrapType.userSelect;
    pointerEvent?: bootstrapType.pointerEvent;
    position?: bootstrapType.position;
    overflow?: bootstrapType.overflow;
    overflowX?: bootstrapType.overflow;
    overflowY?: bootstrapType.overflow;
    textAlign?: bootstrapType.textAlign | bootstrapType.textAlign[];
    verticalAlign?: bootstrapType.verticalAlign;
    opacity?: bootstrapType.opacity;
    bgOpacity?: bootstrapType.bgOpacity;
    textOpacity?: bootstrapType.textOpacity;
    focusRing?: bootstrapType.focusRing;
    textBgColor?: bootstrapType.textBgColor;
    textColor?: bootstrapType.textColor;
    bgColor?: bootstrapType.bgColor;
    textTransform?: bootstrapType.textTransform;
    textDecoration?: bootstrapType.textDecoration;
    lineHeight?: bootstrapType.lineHeight;
    fontSize?: bootstrapType.fontSize;
    fontDisplay?: bootstrapType.fontDisplay;
    fontWeight?: bootstrapType.fontWeight;
    top?: bootstrapType.top;
    bottom?: bootstrapType.bottom;
    start?: bootstrapType.start;
    end?: bootstrapType.end;
    tMiddle?: bootstrapType.tMiddle;
    height?: bootstrapType.height;
    width?: bootstrapType.width;
    maxHeight?: bootstrapType.maxHeight;
    maxWidth?: bootstrapType.maxWidth;
    minViewHeight?: bootstrapType.minViewHeight;
    minViewWidth?: bootstrapType.minViewWidth;
    viewHeight?: bootstrapType.viewHeight;
    viewWidth?: bootstrapType.viewWidth;
    shadow?: bootstrapType.shadow;
    border?: bootstrapType.border | bootstrapType.border[];
    borderNone?: bootstrapType.borderNone | bootstrapType.borderNone[];
    borderColor?: bootstrapType.borderColor;
    borderOpacity?: bootstrapType.borderOpacity;
    borderWidth?: bootstrapType.borderWidth;
    rounded?: bootstrapType.rounded;
    roundedNone?: bootstrapType.roundedNone;
    roundedSize?: bootstrapType.roundedSize;
    padding?: bootstrapType.padding | bootstrapType.padding[];
    paddingX?: bootstrapType.paddingX | bootstrapType.paddingX[];
    paddingY?: bootstrapType.paddingY | bootstrapType.paddingY[];
    paddingTop?: bootstrapType.paddingTop | bootstrapType.paddingTop[];
    paddingBottom?: bootstrapType.paddingBottom | bootstrapType.paddingBottom[];
    paddingStart?: bootstrapType.paddingStart | bootstrapType.paddingStart[];
    paddingEnd?: bootstrapType.paddingEnd | bootstrapType.paddingEnd[];
    margin?: bootstrapType.margin | bootstrapType.margin[];
    marginX?: bootstrapType.marginX | bootstrapType.marginX[];
    marginY?: bootstrapType.marginY | bootstrapType.marginY[];
    marginTop?: bootstrapType.marginTop | bootstrapType.marginTop[];
    marginBottom?: bootstrapType.marginBottom | bootstrapType.marginBottom[];
    marginStart?: bootstrapType.marginStart | bootstrapType.marginStart[];
    marginEnd?: bootstrapType.marginEnd | bootstrapType.marginEnd[];
    gap?: bootstrapType.gap | bootstrapType.gap[];
    gutter?: bootstrapType.gutter | bootstrapType.gutter[];
    gutterX?: bootstrapType.gutterX | bootstrapType.gutterX[];
    gutterY?: bootstrapType.gutterY | bootstrapType.gutterY[];
    print?: bootstrapType.print | bootstrapType.print;
    container?: bootstrapType.container;
    zIndex?: bootstrapType.zIndex;
    objectFit?: bootstrapType.objectFit | bootstrapType.objectFit[];
    ratio?: bootstrapType.ratio;
    fixed?: bootstrapType.fixed;
    sticky?: bootstrapType.sticky | bootstrapType.sticky[];
    clearfix?: bootstrapType.clearfix;
    textTruncate?: bootstrapType.textTruncate;
    visually?: bootstrapType.visually;
    vstack?: bootstrapType.vstack;
    hstack?: bootstrapType.hstack;
    h?: bootstrapType.h;
    small?: bootstrapType.small;
    iconLink?: bootstrapType.iconLink;
}
export declare namespace attachBSClass {
    const attach: IAttachFn;
}
export declare namespace attachBSAttr {
    const attach: IAttachFn;
}
export declare const bsConsNoElemArg: <T extends IAttr>(fn: <T_1 extends IAttr>(attr: T_1) => IAttr, arg?: any[]) => IAttr;
export declare const bsConstArg: <T extends IAttr>(prop: string, arg?: any[]) => T;
export declare const bsConstArgTag: <T extends IAttr>(prop: string, t1: string, t2: string, fn: (i: T) => boolean, arg?: any[]) => string;
